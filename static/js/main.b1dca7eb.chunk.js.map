{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","squareClasses","onClick","onClickFn","disabled","disableBtn","squareValue","MainBoard","_this","Object","C_Users_panayiotis91_Desktop_Js_apps_Reactjs_ReactStarter_5_Memory_Game_mnimy_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_panayiotis91_Desktop_Js_apps_Reactjs_ReactStarter_5_Memory_Game_mnimy_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_panayiotis91_Desktop_Js_apps_Reactjs_ReactStarter_5_Memory_Game_mnimy_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","squares","generateBoardSquares","completedSquares","Array","fill","classesToAssign","previousVal","previousSquarePos","totalClicks","totalSquares","pairs","finalBoardSquares","pos","generateRandomNumber","checkValueAppearances","arr","val","count","i","length","min","max","Math","floor","random","classes","_this2","handleClick","_this3","completed","slice","map","el","setState","_this4","gameboard","key","renderSquareValue","LevelScore","LevelResult","React","Component","result","includes","score","_ref","moves","ceil","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b1dca7eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/style.css';\r\n\r\nfunction Square(props) {\r\n  return (\r\n      /* In a function we don't worry about this*/\r\n      /* () => this.props.onClick() was used in class version of Square , to be able to access the this parameter */\r\n\r\n      //{props.squareValue}\r\n    <button className={props.squareClasses} onClick={props.onClickFn} disabled={props.disableBtn}>\r\n      {props.squareValue}\r\n    </button>  \r\n  );\r\n}\r\n\r\nclass MainBoard extends React.Component{\r\n\r\n      constructor(props) {\r\n          super(props);\r\n\r\n          const totalSquares = 16;\r\n\r\n          this.state = {\r\n            squares: this.generateBoardSquares(totalSquares),\r\n            completedSquares: Array(totalSquares).fill(null),\r\n            classesToAssign: Array(totalSquares).fill('squareBtn'),\r\n            previousVal: null,\r\n            previousSquarePos: null,\r\n            totalClicks: 0,              \r\n            totalSquares\r\n          };\r\n      }\r\n\r\n      generateBoardSquares(totalSquares){\r\n          /* 4x4 = 16 \r\n             => we need 8 pairs of numbers. (8 different numbers) */\r\n          const pairs = totalSquares / 2;\r\n\r\n          let squareValue;\r\n          let finalBoardSquares = [];\r\n\r\n          //loop depends on the number of total squares\r\n          for (var pos=0; pos < totalSquares; pos++){                    \r\n                let posFilled = false;\r\n                while(!posFilled){\r\n                      //generate a random value\r\n                      squareValue = this.generateRandomNumber(1,pairs);\r\n\r\n                      //check if the value has been generated over 2 times\r\n                      if (!this.checkValueAppearances(finalBoardSquares, squareValue)){ //not found over 2 times\r\n                        finalBoardSquares[pos] = squareValue;      \r\n                        break;              \r\n                      }\r\n                      else{  //value found over 2 times in the array => we need another number\r\n                        continue;\r\n                      } \r\n                }\r\n          }\r\n          return finalBoardSquares;\r\n      }\r\n\r\n      checkValueAppearances(arr, val){\r\n          var count = 0;\r\n          for (var i = 0; i < arr.length; i++) {\r\n              if (arr[i] === val) {\r\n                  count++;\r\n              }\r\n\r\n              if (count >= 2)\r\n                return true;\r\n          }\r\n          return false;\r\n      }\r\n\r\n      generateRandomNumber(min , max) {\r\n         return Math.floor(Math.random() * (max - min + 1)) + min;\r\n      }\r\n\r\n      renderSquareValue(val,i,classes,disableBtn) {\r\n          return (\r\n            <Square\r\n              squareValue={val}\r\n              squareClasses={classes}\r\n              disableBtn={disableBtn}\r\n              onClickFn={() => this.handleClick(val,i)}\r\n            />\r\n          );\r\n      }       \r\n\r\n      handleClick(val,i) {\r\n          //console.log(`val is ${val} , prev val: ${this.state.previousVal}`);\r\n          //console.log(`square Clicked is ${i} , prev square clicked: ${this.state.previousSquarePos}`);\r\n\r\n\r\n          let completed = this.state.completedSquares.slice();\r\n          const classes = this.state.classesToAssign.map( (el,i) =>{\r\n                if (this.state.completedSquares[i] !== null){\r\n                  return \"squareBtn squareBtn-completed\";\r\n                }\r\n                else{\r\n                  return \"squareBtn\";\r\n                }\r\n          });                \r\n\r\n          //compare previous val with the current\r\n          // if they are equal => correct combo found => style squares accordingly\r\n          if (val === this.state.previousVal){\r\n                completed[i] = val;\r\n                completed[this.state.previousSquarePos] = this.state.previousVal;\r\n\r\n                classes[i] += \" squareBtn-completed\";\r\n                classes[this.state.previousSquarePos] += \" squareBtn-completed\";\r\n\r\n          }\r\n          else{\r\n                classes[i] += \" squareBtn-active\";\r\n                classes[this.state.previousSquarePos] += \" squareBtn-active\";                  \r\n          }\r\n\r\n          //set the state\r\n          this.setState({\r\n            previousVal: val,\r\n            previousSquarePos: i,\r\n            completedSquares: completed,\r\n            classesToAssign: classes,\r\n            totalClicks: this.state.totalClicks + 1\r\n          });  \r\n\r\n      }\r\n      \r\n      render(){\r\n\r\n            const gameboard = this.state.squares.map( (el,i) =>{\r\n                let disableBtn = (this.state.completedSquares[i] !== null) ? true : false; \r\n                return <div key={i} className=\"square\">\r\n                          {this.renderSquareValue(el,i,this.state.classesToAssign[i],disableBtn)}\r\n                        </div>\r\n            });\r\n\r\n            return (\r\n              <div className=\"game-section\">\r\n                <LevelScore \r\n                  totalClicks={this.state.totalClicks}\r\n                  totalSquares={this.state.totalSquares}\r\n                  completedSquares={this.state.completedSquares}\r\n                />\r\n                <div className=\"board-section\">\r\n                    {gameboard}\r\n                </div>\r\n                <LevelResult \r\n                    completedSquares={this.state.completedSquares}\r\n                />\r\n              </div>\r\n            );\r\n      }\r\n}\r\n\r\nfunction LevelResult(props){\r\n\r\n  let result = '';\r\n  //check if player won the level (all total combos found)\r\n  if ( !props.completedSquares.includes(null) ){\r\n      result = 'Congats!! You won the level';\r\n  }\r\n\r\n  return (\r\n      <div className=\"result-section\">\r\n        <span className=\"result\">{result}</span>\r\n      </div>\r\n  );\r\n\r\n}\r\n\r\nfunction LevelScore(props){\r\n\r\n    let score = '';\r\n    const [moves, squares] = [props.totalClicks, props.totalSquares];\r\n\r\n    if ( !props.completedSquares.includes(null) ){\r\n        score = Math.ceil( (squares / moves) * 100 ) + ' /100';  //lets say moves are 16, total squares are 16\r\n                                          // (16 / 16) * 100 = 100% => best score. \r\n    }\r\n\r\n\r\n      return (\r\n        <div className=\"score-section\">\r\n            <h4>Your score: <span className=\"score\">{score}</span></h4>\r\n        </div>\r\n      );\r\n\r\n}\r\n\r\nReactDOM.render(\r\n  <MainBoard />,          \r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}