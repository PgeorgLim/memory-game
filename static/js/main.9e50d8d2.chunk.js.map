{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","squareClasses","onClick","onClickFn","disabled","disableBtn","squareValue","MainBoard","_this","Object","C_Users_panayiotis91_Desktop_Js_apps_Reactjs_ReactStarter_5_Memory_Game_mnimy_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","levelSquares","C_Users_panayiotis91_Desktop_Js_apps_Reactjs_ReactStarter_5_Memory_Game_mnimy_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_panayiotis91_Desktop_Js_apps_Reactjs_ReactStarter_5_Memory_Game_mnimy_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","squares","generateBoardSquares","completedSquares","Array","fill","classesToAssign","previousVal","previousSquarePos","totalClicks","totalSquares","currentLevel","gameEnded","pairs","finalBoardSquares","pos","generateRandomNumber","checkValueAppearances","arr","val","count","i","length","min","max","Math","floor","random","classes","_this2","handleClick","_this3","completed","slice","map","el","setState","newNumOfSquares","newLevel","_this4","gameboard","key","renderSquareValue","LevelScore","LevelResult","onClickReset","resetGame","React","Component","result","resetSection","includes","score","_ref","moves","ceil","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e50d8d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/style.css';\r\n\r\nfunction Square(props) {\r\n  return (\r\n      /* In a function we don't worry about this*/\r\n      /* () => this.props.onClick() was used in class version of Square , to be able to access the this parameter */\r\n\r\n      //{props.squareValue}\r\n    <button className={props.squareClasses} onClick={props.onClickFn} disabled={props.disableBtn}>\r\n      {props.squareValue}\r\n    </button>  \r\n  );\r\n}\r\n\r\nclass MainBoard extends React.Component{\r\n\r\n      constructor(props) {\r\n          super(props);\r\n\r\n          const levelSquares = [8 , 16 , 20];\r\n          const currentLevel = 1;\r\n\r\n          this.state = {\r\n            squares: this.generateBoardSquares(levelSquares[0]),\r\n            completedSquares: Array(levelSquares[0]).fill(null),\r\n            classesToAssign: Array(levelSquares[0]).fill('squareBtn'),\r\n            previousVal: null,\r\n            previousSquarePos: null,\r\n            totalClicks: 0,              \r\n            totalSquares : levelSquares[0],\r\n            currentLevel,\r\n            levelSquares,\r\n            gameEnded: false\r\n          };\r\n      }\r\n\r\n      generateBoardSquares(totalSquares){\r\n          /* 4x4 = 16 \r\n             => we need 8 pairs of numbers. (8 different numbers) */\r\n          const pairs = totalSquares / 2;\r\n\r\n          let squareValue;\r\n          let finalBoardSquares = [];\r\n\r\n          //loop depends on the number of total squares\r\n          for (var pos=0; pos < totalSquares; pos++){                    \r\n                let posFilled = false;\r\n                while(!posFilled){\r\n                      //generate a random value\r\n                      squareValue = this.generateRandomNumber(1,pairs);\r\n\r\n                      //check if the value has been generated over 2 times\r\n                      if (!this.checkValueAppearances(finalBoardSquares, squareValue)){ //not found over 2 times\r\n                        finalBoardSquares[pos] = squareValue;      \r\n                        break;              \r\n                      }\r\n                      else{  //value found over 2 times in the array => we need another number\r\n                        continue;\r\n                      } \r\n                }\r\n          }\r\n          return finalBoardSquares;\r\n      }\r\n\r\n      checkValueAppearances(arr, val){\r\n          var count = 0;\r\n          for (var i = 0; i < arr.length; i++) {\r\n              if (arr[i] === val) {\r\n                  count++;\r\n              }\r\n\r\n              if (count >= 2)\r\n                return true;\r\n          }\r\n          return false;\r\n      }\r\n\r\n      generateRandomNumber(min , max) {\r\n         return Math.floor(Math.random() * (max - min + 1)) + min;\r\n      }\r\n\r\n      renderSquareValue(val,i,classes,disableBtn) {\r\n          return (\r\n            <Square\r\n              squareValue={val}\r\n              squareClasses={classes}\r\n              disableBtn={disableBtn}\r\n              onClickFn={() => this.handleClick(val,i)}\r\n            />\r\n          );\r\n      }       \r\n\r\n      handleClick(val,i) {\r\n\r\n          let completed = this.state.completedSquares.slice();\r\n          const classes = this.state.classesToAssign.map( (el,i) =>{\r\n                if (this.state.completedSquares[i] !== null){\r\n                  return \"squareBtn squareBtn-completed\";\r\n                }\r\n                else{\r\n                  return \"squareBtn\";\r\n                }\r\n          });                \r\n\r\n          //compare previous val with the current\r\n          // if they are equal => correct combo found => style squares accordingly\r\n          // and not if user clicks on the same square\r\n          if ( (val === this.state.previousVal) && (this.state.previousSquarePos !== i)){\r\n                completed[i] = val;\r\n                completed[this.state.previousSquarePos] = this.state.previousVal;\r\n\r\n                classes[i] += \" squareBtn-completed\";\r\n                classes[this.state.previousSquarePos] += \" squareBtn-completed\";\r\n\r\n          }\r\n          else{\r\n                classes[i] += \" squareBtn-active\";\r\n                classes[this.state.previousSquarePos] += \" squareBtn-active\";                  \r\n          }\r\n\r\n          //set the state\r\n          this.setState({\r\n            previousVal: val,\r\n            previousSquarePos: i,\r\n            completedSquares: completed,\r\n            classesToAssign: classes,\r\n            totalClicks: this.state.totalClicks + 1\r\n          });  \r\n\r\n      }\r\n\r\n      resetGame(){\r\n\r\n        let newNumOfSquares, newLevel, gameEnded;\r\n\r\n        if ( (this.state.currentLevel+1) <= this.state.levelSquares.length ){\r\n            // new Level\r\n            newNumOfSquares = this.state.levelSquares[this.state.currentLevel];\r\n            newLevel = this.state.currentLevel + 1;\r\n            gameEnded = false;\r\n        }\r\n        else{\r\n            //Game finished, complete reset\r\n            newNumOfSquares = this.state.levelSquares[0];\r\n            newLevel = 1;    \r\n            gameEnded = true; \r\n        }\r\n\r\n        this.setState({\r\n          squares: this.generateBoardSquares(newNumOfSquares),\r\n          completedSquares: Array(newNumOfSquares).fill(null),\r\n          classesToAssign: Array(newNumOfSquares).fill('squareBtn'),\r\n          previousVal: null,\r\n          previousSquarePos: null,\r\n          totalClicks: 0,              \r\n          totalSquares: newNumOfSquares,\r\n          currentLevel: newLevel,\r\n          gameEnded\r\n        }); \r\n\r\n      }\r\n      \r\n      render(){\r\n\r\n              const gameboard = this.state.squares.map( (el,i) =>{\r\n                  let disableBtn = (this.state.completedSquares[i] !== null) ? true : false; \r\n                  return <div key={i} className=\"square\">\r\n                            {this.renderSquareValue(el,i,this.state.classesToAssign[i],disableBtn)}\r\n                          </div>\r\n              });\r\n\r\n\r\n            return (\r\n              <div className=\"game-section\">\r\n                <LevelScore \r\n                  totalClicks={this.state.totalClicks}\r\n                  totalSquares={this.state.totalSquares}\r\n                  completedSquares={this.state.completedSquares}\r\n                />\r\n                <div className=\"board-section\">\r\n                    {gameboard}\r\n                </div>\r\n                <LevelResult \r\n                    completedSquares={this.state.completedSquares}\r\n                    currentLevel={this.state.currentLevel}\r\n                    levelSquares={this.state.levelSquares}\r\n                    onClickReset={() => this.resetGame()}\r\n                />\r\n              </div>\r\n            );\r\n      }\r\n}\r\n\r\nfunction LevelResult(props){\r\n\r\n  let result = '';\r\n  let resetSection = '';\r\n\r\n  //check if player won the level (all total combos found) and if he won the game in general\r\n  if ( !props.completedSquares.includes(null) ){\r\n\r\n      if ( (props.currentLevel + 1) > props.levelSquares.length ){\r\n        resetSection = \r\n          <div className=\"game-over-section\">\r\n            <h2 className=\"result\">Game Over <span className=\"won-msg\">You won the game !!!</span></h2>\r\n            <button onClick={props.onClickReset} className=\"reset-btn\"> Start New Game </button>\r\n          </div>;\r\n      }else{\r\n        result = 'Congats!! You won the level';\r\n        resetSection = <button onClick={props.onClickReset} className=\"reset-btn\"> Next Level </button>;\r\n      }\r\n      \r\n  }\r\n  \r\n\r\n  return (\r\n      <div className=\"result-section\">\r\n        <span className=\"result\">{result}</span>\r\n        {resetSection}\r\n      </div>\r\n\r\n  );\r\n\r\n}\r\n\r\nfunction LevelScore(props){\r\n\r\n    let score = '';\r\n    const [moves, squares] = [props.totalClicks, props.totalSquares];\r\n\r\n    if ( !props.completedSquares.includes(null) ){\r\n        score = Math.ceil( (squares / moves) * 100 ) + ' /100';  \r\n        //lets say moves are 16, total squares are 16\r\n        // (16 / 16) * 100 = 100% => best score. \r\n    }\r\n\r\n\r\n      return (\r\n        <div className=\"score-section\">\r\n            <h4>Your score: <span className=\"score\">{score}</span></h4>\r\n        </div>\r\n      );\r\n\r\n}\r\n\r\nReactDOM.render(\r\n  <MainBoard />,          \r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}